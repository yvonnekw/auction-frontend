/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createOrder } from '../fn/order-controller/create-order';
import { CreateOrder$Params } from '../fn/order-controller/create-order';
import { findAllOrders } from '../fn/order-controller/find-all-orders';
import { FindAllOrders$Params } from '../fn/order-controller/find-all-orders';
import { findByOrderId } from '../fn/order-controller/find-by-order-id';
import { FindByOrderId$Params } from '../fn/order-controller/find-by-order-id';
import { findOrdersByUsername } from '../fn/order-controller/find-orders-by-username';
import { FindOrdersByUsername$Params } from '../fn/order-controller/find-orders-by-username';
import { getPayment } from '../fn/order-controller/get-payment';
import { GetPayment$Params } from '../fn/order-controller/get-payment';
import { OrderResponse } from '../models/order-response';

@Injectable({ providedIn: 'root' })
export class OrderControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createOrder()` */
  static readonly CreateOrderPath = '/api/v1/orders/create-order';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder$Response(params: CreateOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder(params: CreateOrder$Params, context?: HttpContext): Observable<number> {
    return this.createOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getPayment()` */
  static readonly GetPaymentPath = '/api/v1/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPayment$Response(params?: GetPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPayment(params?: GetPayment$Params, context?: HttpContext): Observable<string> {
    return this.getPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `findByOrderId()` */
  static readonly FindByOrderIdPath = '/api/v1/orders/{order-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByOrderId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByOrderId$Response(params: FindByOrderId$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponse>> {
    return findByOrderId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByOrderId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByOrderId(params: FindByOrderId$Params, context?: HttpContext): Observable<OrderResponse> {
    return this.findByOrderId$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponse>): OrderResponse => r.body)
    );
  }

  /** Path part for operation `findOrdersByUsername()` */
  static readonly FindOrdersByUsernamePath = '/api/v1/orders/username';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findOrdersByUsername()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOrdersByUsername$Response(params: FindOrdersByUsername$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return findOrdersByUsername(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findOrdersByUsername$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOrdersByUsername(params: FindOrdersByUsername$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.findOrdersByUsername$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

  /** Path part for operation `findAllOrders()` */
  static readonly FindAllOrdersPath = '/api/v1/orders/get-all-orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllOrders$Response(params: FindAllOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return findAllOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllOrders(params: FindAllOrders$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.findAllOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

}
