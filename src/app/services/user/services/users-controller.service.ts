/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../../shared/api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteUserByUserId } from '../fn/users-controller/delete-user-by-user-id';
import { DeleteUserByUserId$Params } from '../fn/users-controller/delete-user-by-user-id';
import { existByUserId } from '../fn/users-controller/exist-by-user-id';
import { ExistByUserId$Params } from '../fn/users-controller/exist-by-user-id';
import { findUserByUserId } from '../fn/users-controller/find-user-by-user-id';
import { FindUserByUserId$Params } from '../fn/users-controller/find-user-by-user-id';
import { getAllUser } from '../fn/users-controller/get-all-user';
import { GetAllUser$Params } from '../fn/users-controller/get-all-user';
import { getUsers } from '../fn/users-controller/get-users';
import { GetUsers$Params } from '../fn/users-controller/get-users';
import { registerUser } from '../fn/users-controller/register-user';
import { RegisterUser$Params } from '../fn/users-controller/register-user';
import { updateUser } from '../fn/users-controller/update-user';
import { UpdateUser$Params } from '../fn/users-controller/update-user';
import { UsersResponse } from '../models/users-response';

@Injectable({ providedIn: 'root' })
export class UsersControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUser()` */
  static readonly UpdateUserPath = '/api/v1/users/update-user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser$Response(params: UpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UsersResponse>> {
    return updateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser(params: UpdateUser$Params, context?: HttpContext): Observable<UsersResponse> {
    return this.updateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UsersResponse>): UsersResponse => r.body)
    );
  }

  /** Path part for operation `registerUser()` */
  static readonly RegisterUserPath = '/api/v1/users/create-user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerUser$Response(params: RegisterUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UsersResponse>> {
    return registerUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerUser(params: RegisterUser$Params, context?: HttpContext): Observable<UsersResponse> {
    return this.registerUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UsersResponse>): UsersResponse => r.body)
    );
  }

  /** Path part for operation `findUserByUserId()` */
  static readonly FindUserByUserIdPath = '/api/v1/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findUserByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findUserByUserId$Response(params: FindUserByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<UsersResponse>> {
    return findUserByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findUserByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findUserByUserId(params: FindUserByUserId$Params, context?: HttpContext): Observable<UsersResponse> {
    return this.findUserByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<UsersResponse>): UsersResponse => r.body)
    );
  }

  /** Path part for operation `deleteUserByUserId()` */
  static readonly DeleteUserByUserIdPath = '/api/v1/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserByUserId$Response(params: DeleteUserByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUserByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserByUserId(params: DeleteUserByUserId$Params, context?: HttpContext): Observable<void> {
    return this.deleteUserByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllUser()` */
  static readonly GetAllUserPath = '/api/v1/users/get-all-users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUser$Response(params?: GetAllUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UsersResponse>>> {
    return getAllUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUser(params?: GetAllUser$Params, context?: HttpContext): Observable<Array<UsersResponse>> {
    return this.getAllUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UsersResponse>>): Array<UsersResponse> => r.body)
    );
  }

  /** Path part for operation `existByUserId()` */
  static readonly ExistByUserIdPath = '/api/v1/users/exits/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `existByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  existByUserId$Response(params: ExistByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return existByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `existByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  existByUserId(params: ExistByUserId$Params, context?: HttpContext): Observable<boolean> {
    return this.existByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getUsers()` */
  static readonly GetUsersPath = '/api/v1/users/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers$Response(params?: GetUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers(params?: GetUsers$Params, context?: HttpContext): Observable<string> {
    return this.getUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
