/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createProduct } from '../fn/product-controller/create-product';
import { CreateProduct$Params } from '../fn/product-controller/create-product';
import { getAllProducts } from '../fn/product-controller/get-all-products';
import { GetAllProducts$Params } from '../fn/product-controller/get-all-products';
import { getProduct } from '../fn/product-controller/get-product';
import { GetProduct$Params } from '../fn/product-controller/get-product';
import { getProductById } from '../fn/product-controller/get-product-by-id';
import { GetProductById$Params } from '../fn/product-controller/get-product-by-id';
import { markProductAsBought } from '../fn/product-controller/mark-product-as-bought';
import { MarkProductAsBought$Params } from '../fn/product-controller/mark-product-as-bought';
import { ProductCartResponse } from '../models/product-cart-response';
import { ProductResponse } from '../models/product-response';
import { purchaseProducts } from '../fn/product-controller/purchase-products';
import { PurchaseProducts$Params } from '../fn/product-controller/purchase-products';
import { searchProducts } from '../fn/product-controller/search-products';
import { SearchProducts$Params } from '../fn/product-controller/search-products';
import { updateProduct } from '../fn/product-controller/update-product';
import { UpdateProduct$Params } from '../fn/product-controller/update-product';

@Injectable({ providedIn: 'root' })
export class ProductControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProductById()` */
  static readonly GetProductByIdPath = '/api/v1/products/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById$Response(params: GetProductById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductCartResponse>> {
    return getProductById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductById(params: GetProductById$Params, context?: HttpContext): Observable<ProductCartResponse> {
    return this.getProductById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductCartResponse>): ProductCartResponse => r.body)
    );
  }

  /** Path part for operation `updateProduct()` */
  static readonly UpdateProductPath = '/api/v1/products/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProduct$Response(params: UpdateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProduct(params: UpdateProduct$Params, context?: HttpContext): Observable<void> {
    return this.updateProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `markProductAsBought()` */
  static readonly MarkProductAsBoughtPath = '/api/v1/products/{productId}/mark-as-bought';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markProductAsBought()` instead.
   *
   * This method doesn't expect any request body.
   */
  markProductAsBought$Response(params: MarkProductAsBought$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return markProductAsBought(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markProductAsBought$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markProductAsBought(params: MarkProductAsBought$Params, context?: HttpContext): Observable<void> {
    return this.markProductAsBought$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `purchaseProducts()` */
  static readonly PurchaseProductsPath = '/api/v1/products/purchase';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purchaseProducts()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purchaseProducts$Response(params: PurchaseProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return purchaseProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purchaseProducts$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purchaseProducts(params: PurchaseProducts$Params, context?: HttpContext): Observable<{
}> {
    return this.purchaseProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createProduct()` */
  static readonly CreateProductPath = '/api/v1/products/create-product';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProduct$Response(params: CreateProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponse>> {
    return createProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProduct(params: CreateProduct$Params, context?: HttpContext): Observable<ProductResponse> {
    return this.createProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponse>): ProductResponse => r.body)
    );
  }

  /** Path part for operation `getProduct()` */
  static readonly GetProductPath = '/api/v1/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProduct$Response(params?: GetProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProduct(params?: GetProduct$Params, context?: HttpContext): Observable<string> {
    return this.getProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `searchProducts()` */
  static readonly SearchProductsPath = '/api/v1/products/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchProducts$Response(params: SearchProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductResponse>>> {
    return searchProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchProducts(params: SearchProducts$Params, context?: HttpContext): Observable<Array<ProductResponse>> {
    return this.searchProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductResponse>>): Array<ProductResponse> => r.body)
    );
  }

  /** Path part for operation `getAllProducts()` */
  static readonly GetAllProductsPath = '/api/v1/products/get-all-products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProducts$Response(params?: GetAllProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductResponse>>> {
    return getAllProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProducts(params?: GetAllProducts$Params, context?: HttpContext): Observable<Array<ProductResponse>> {
    return this.getAllProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductResponse>>): Array<ProductResponse> => r.body)
    );
  }

}
