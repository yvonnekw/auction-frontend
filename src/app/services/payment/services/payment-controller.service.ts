/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllPayments } from '../fn/payment-controller/get-all-payments';
import { GetAllPayments$Params } from '../fn/payment-controller/get-all-payments';
import { getPayment } from '../fn/payment-controller/get-payment';
import { GetPayment$Params } from '../fn/payment-controller/get-payment';
import { Payment } from '../models/payment';
import { PaymentResponse } from '../models/payment-response';
import { processPayment } from '../fn/payment-controller/process-payment';
import { ProcessPayment$Params } from '../fn/payment-controller/process-payment';

@Injectable({ providedIn: 'root' })
export class PaymentControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `processPayment()` */
  static readonly ProcessPaymentPath = '/api/v1/payments/process-payment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `processPayment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  processPayment$Response(params: ProcessPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentResponse>> {
    return processPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `processPayment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  processPayment(params: ProcessPayment$Params, context?: HttpContext): Observable<PaymentResponse> {
    return this.processPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentResponse>): PaymentResponse => r.body)
    );
  }

  /** Path part for operation `getPayment()` */
  static readonly GetPaymentPath = '/api/v1/payments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPayment$Response(params?: GetPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPayment(params?: GetPayment$Params, context?: HttpContext): Observable<string> {
    return this.getPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllPayments()` */
  static readonly GetAllPaymentsPath = '/api/v1/payments/get-all-payments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPayments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPayments$Response(params: GetAllPayments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Payment>>> {
    return getAllPayments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPayments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPayments(params: GetAllPayments$Params, context?: HttpContext): Observable<Array<Payment>> {
    return this.getAllPayments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Payment>>): Array<Payment> => r.body)
    );
  }

}
