/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createInvoice } from '../fn/invoice-controller/create-invoice';
import { CreateInvoice$Params } from '../fn/invoice-controller/create-invoice';
import { getAllInvoices } from '../fn/invoice-controller/get-all-invoices';
import { GetAllInvoices$Params } from '../fn/invoice-controller/get-all-invoices';
import { getPayment1 } from '../fn/invoice-controller/get-payment-1';
import { GetPayment1$Params } from '../fn/invoice-controller/get-payment-1';
import { InvoiceResponse } from '../models/invoice-response';

@Injectable({ providedIn: 'root' })
export class InvoiceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createInvoice()` */
  static readonly CreateInvoicePath = '/api/v1/invoices/create-invoice';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createInvoice()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createInvoice$Response(params: CreateInvoice$Params, context?: HttpContext): Observable<StrictHttpResponse<InvoiceResponse>> {
    return createInvoice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createInvoice$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createInvoice(params: CreateInvoice$Params, context?: HttpContext): Observable<InvoiceResponse> {
    return this.createInvoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<InvoiceResponse>): InvoiceResponse => r.body)
    );
  }

  /** Path part for operation `getPayment1()` */
  static readonly GetPayment1Path = '/api/v1/invoices';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPayment1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPayment1$Response(params?: GetPayment1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getPayment1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPayment1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPayment1(params?: GetPayment1$Params, context?: HttpContext): Observable<string> {
    return this.getPayment1$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getAllInvoices()` */
  static readonly GetAllInvoicesPath = '/api/v1/invoices/get-all-invoices';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllInvoices()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInvoices$Response(params?: GetAllInvoices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InvoiceResponse>>> {
    return getAllInvoices(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllInvoices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInvoices(params?: GetAllInvoices$Params, context?: HttpContext): Observable<Array<InvoiceResponse>> {
    return this.getAllInvoices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InvoiceResponse>>): Array<InvoiceResponse> => r.body)
    );
  }

}
